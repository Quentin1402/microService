version: '3'

services:
  # Service de la base de données MariaDB
  db:
    image: mariadb
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root          # Mot de passe root de la base de données
      MYSQL_DATABASE: mariadb           # Nom de la base de données
      MYSQL_USER: user                   # Nom d'utilisateur de la base de données
      MYSQL_PASSWORD: root               # Mot de passe de l'utilisateur de la base de données
    ports: 
      - "3307:3306"                      # Mappage du port local 3307 au port 3306 du conteneur
    volumes: 
      - ./MariaDB/liste.sql:/docker-entrypoint-initdb.d/liste.sql  # Montage du fichier SQL pour l'initialisation de la base de données
    healthcheck:
      test: ["CMD-SHELL", "mysql -h 127.0.0.1 -u user -p root -e 'SELECT COUNT(*) FROM port;'"] # Vérification de la santé du conteneur MariaDB

  # Service de l'application web
  web:
    build:
      context: .                    # Répertoire contenant les fichiers sources de l'application web
    ports: 
      - "9090:80"                       # Mappage du port local 9090 au port 80 du conteneur
    depends_on: 
      - db                              # Dépendance du service web au service de la base de données
    command: /bin/bash -c "a2ensite 000-default && apache2-foreground"  # Commande pour démarrer le serveur web Apache
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]  # Vérification de la santé du conteneur web

  # Service Nginx pour le reverse proxy
  nginx:
    image: nginx:latest
    ports: 
      - "443:443"                       # Mappage du port local 443 au port 443 du conteneur
    volumes: 
      - ./nginx.conf:/etc/nginx/nginx.conf  # Montage du fichier de configuration Nginx
      - ./certs:/certs                   # Montage du répertoire des certificats SSL
    depends_on:
      - web                             # Dépendance du service Nginx au service web
    restart: always                     # Redémarrage du conteneur en cas de problème
    command: [ "sh", "-c", "chmod +x /certs/key.pem && nginx -g 'daemon off;'" ]  # Commande pour démarrer Nginx
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]  # Vérification de la santé du conteneur Nginx

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.11.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - elk

  logstash:
    image: docker.elastic.co/logstash/logstash:7.11.1
    container_name: logstash
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/
    ports:
      - "5044:5044"
      - "5045:5045"
      - "9600:9600"
    networks:
      - elk
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:7.11.1
    container_name: kibana
    environment:
    - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    - ELASTICSEARCH_USERNAME=elastic
    - ELASTICSEARCH_PASSWORD=password
    ports:
      - "5601:5601"
    networks:
      - elk
    depends_on:
      - elasticsearch

  filebeat:
    image: docker.elastic.co/beats/filebeat:7.11.2
    container_name: filebeat
    volumes:
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - ./logs:/logs
    networks:
      - elk
    depends_on:
      - logstash
      - elasticsearch

networks:
  elk:
    driver: bridge