version: '3'

services:
  # Service de la base de données MariaDB
  db:
    image: mariadb
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root          # Mot de passe root de la base de données
      MYSQL_DATABASE: mariadb           # Nom de la base de données
      MYSQL_USER: user                   # Nom d'utilisateur de la base de données
      MYSQL_PASSWORD: root               # Mot de passe de l'utilisateur de la base de données
    ports: 
      - "3307:3306"                      # Mappage du port local 3307 au port 3306 du conteneur
    volumes: 
      - ./MariaDB/liste.sql:/docker-entrypoint-initdb.d/liste.sql  # Montage du fichier SQL pour l'initialisation de la base de données
    healthcheck:
      test: ["CMD-SHELL", "mysql -h 127.0.0.1 -u user -p root -e 'SELECT COUNT(*) FROM port;'"] # Vérification de la santé du conteneur MariaDB

  # Service de l'application web
  web:
    build:
      context: ./app                    # Répertoire contenant les fichiers sources de l'application web
    ports: 
      - "9090:80"                       # Mappage du port local 9090 au port 80 du conteneur
    depends_on: 
      - db                              # Dépendance du service web au service de la base de données
    command: /bin/bash -c "a2ensite 000-default && apache2-foreground"  # Commande pour démarrer le serveur web Apache
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]  # Vérification de la santé du conteneur web

  # Service Nginx pour le reverse proxy
  nginx:
    image: nginx:latest
    ports: 
      - "443:443"                       # Mappage du port local 443 au port 443 du conteneur
    volumes: 
      - ./nginx.conf:/etc/nginx/nginx.conf  # Montage du fichier de configuration Nginx
      - ./certs:/certs                   # Montage du répertoire des certificats SSL
    depends_on:
      - web                             # Dépendance du service Nginx au service web
    restart: always                     # Redémarrage du conteneur en cas de problème
    command: [ "sh", "-c", "chmod +x /certs/key.pem && nginx -g 'daemon off;'" ]  # Commande pour démarrer Nginx
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]  # Vérification de la santé du conteneur Nginx
  
  # Service Prometheus
  prometheus:
    image: prom/prometheus
    ports:
      - "9091:9090"  # Port pour l'interface de Prometheus
    volumes:
      - ./prometheus:/etc/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml

  # Service Grafana
  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"  # Port pour l'interface de Grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin  # Mot de passe admin pour Grafana
    volumes:
      - ./grafana:/var/lib/grafana

  # Service Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.0
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
      - "9300:9300"

  # Service Logstash
  logstash:
    build:
      context: ./app  # Assurez-vous que le chemin relatif correspond à l'emplacement du Dockerfile
      dockerfile: Dockerfile
    volumes:
      - ./logstash.conf:/etc/logstash/conf.d/logstash.conf
      - ./logstash_logs:/var/log/logstash  # Ajout d'un volume pour les logs de Logstash
    depends_on:
      - elasticsearch
    restart: always